// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// GCS is an autogenerated mock type for the GCS type
type GCS struct {
	mock.Mock
}

type GCS_Expecter struct {
	mock *mock.Mock
}

func (_m *GCS) EXPECT() *GCS_Expecter {
	return &GCS_Expecter{mock: &_m.Mock}
}

// GetObjectReader provides a mock function with given fields: ctx, bName, oName
func (_m *GCS) GetObjectReader(ctx context.Context, bName string, oName string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, bName, oName)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, bName, oName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bName, oName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GCS_GetObjectReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectReader'
type GCS_GetObjectReader_Call struct {
	*mock.Call
}

// GetObjectReader is a helper method to define mock.On call
//   - ctx context.Context
//   - bName string
//   - oName string
func (_e *GCS_Expecter) GetObjectReader(ctx interface{}, bName interface{}, oName interface{}) *GCS_GetObjectReader_Call {
	return &GCS_GetObjectReader_Call{Call: _e.mock.On("GetObjectReader", ctx, bName, oName)}
}

func (_c *GCS_GetObjectReader_Call) Run(run func(ctx context.Context, bName string, oName string)) *GCS_GetObjectReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GCS_GetObjectReader_Call) Return(_a0 io.ReadCloser, _a1 error) *GCS_GetObjectReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseEvent provides a mock function with given fields:
func (_m *GCS) ParseEvent() (string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GCS_ParseEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseEvent'
type GCS_ParseEvent_Call struct {
	*mock.Call
}

// ParseEvent is a helper method to define mock.On call
func (_e *GCS_Expecter) ParseEvent() *GCS_ParseEvent_Call {
	return &GCS_ParseEvent_Call{Call: _e.mock.On("ParseEvent")}
}

func (_c *GCS_ParseEvent_Call) Run(run func()) *GCS_ParseEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GCS_ParseEvent_Call) Return(_a0 string, _a1 string, _a2 error) *GCS_ParseEvent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewGCS interface {
	mock.TestingT
	Cleanup(func())
}

// NewGCS creates a new instance of GCS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGCS(t mockConstructorTestingTNewGCS) *GCS {
	mock := &GCS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
